---
title: "HTTPS with Nginx"
desc: "Grab a free domain name from freedns"
sortable: 2
---

[Nginx](https://nginx.org/) is a free and open source webserver for Linux. It is newer and often easier to configure than [Apache](https://httpd.apache.org/), which is why we are using it in this guide.

1. Install nginx.
	```
	apt install nginx
	```
2. Configure nginx to automatically redirect http to https, and www to not www (it's best practice to stick with one). Edit `/etc/nginx/nginx.conf` to include the following:
	Inside the http block, add a server block:
	```
	server {
	        listen                  80;
	        listen                  [::]:80;
	        listen                  443 default_server ssl;
	        server_name             subdomain.domain.com www.subdomain.domain.com;
	        if ($http_host = www.subdomain.domain.com) {
	                return 303 https://subdomain.domain.com$request_uri;
	        }
	        if ($scheme = http) {
	                return 301 https://subdomain.domain.com$request_uri;
	        }
	        ssl_certificate         /etc/letsencrypt/live/subdomain.domain.com/cert.pem;
	        ssl_certificate_key     /etc/letsencrypt/live/subdomain.domain.com/privkey.pem;
	        ssl_protocols           TLSv1 TLSv1.1 TLSv1.2;
	        ssl_ciphers             HIGH:!aNULL:!MD5;
	}
	```
	Additionally, set the website root and index file, also in the http block:
	```
	root /var/www;
	index index.html;
	```
3. Create a website! Use whatever tools you are comfortable with. This site was generated using [jekyll](https://jekyllrb.com/), which basically turns markdown files (generated by you) and formatting (available [online](http://themes.jekyllrc.org/)) into a static HTML website. I found that, after a brief (1 hour) learning curve, nealy 100% of my energies are now spent on content creation rather than fighting with the technologies.
